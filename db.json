{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about_me.md","hash":"eb3c32088f3b5daafe66b1f6ee99f36f98f16f9f","modified":1684723058625},{"_id":"source/_posts/ACL访问控制列表实践.md","hash":"83d14298f03fbef97055ee0f92c035a89c17c841","modified":1685431426479},{"_id":"source/_posts/样式冲突太多，记一次前端CSS升级.md","hash":"9d08b15dabdfca61960aab7d79d5ea17ed6da8ee","modified":1684720980791},{"_id":"source/_posts/urllib3-Drop-support-for-OpenSSL-1-1-1排障记录.md","hash":"e50e92e5e0338fbedad96bd4bdbcdb78e46feccc","modified":1685431389392},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1684720458722},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1684685564053},{"_id":"themes/butterfly/README.md","hash":"52967a864c244af4db8c63902586cb617ee5b8aa","modified":1684685564054},{"_id":"themes/butterfly/package.json","hash":"f19dc1e0af33b877bab3c2f50257430ccfcc064d","modified":1684685564077},{"_id":"themes/butterfly/README_CN.md","hash":"e19021371184361261ddef1d98eb308d78922714","modified":1684685564054},{"_id":"themes/butterfly/plugins.yml","hash":"acc74f24c7e94fe9ded264307a4201c9b410cd9b","modified":1684685564077},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1684685564054},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1684685564054},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1684685564054},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1684685564054},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1684685564055},{"_id":"themes/butterfly/_config.yml","hash":"b090148d45e713fa81bb33b1702a6683c928a3db","modified":1685524478490},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1684685564055},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1684685564077},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1684685564076},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1684685564077},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1684685564077},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1684685564053},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1684685564053},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1684685564053},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1684685564053},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1684685564053},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1684685564055},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1684685564055},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1684685564055},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1684685564055},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1684685564058},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1684685564060},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1684685564078},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1684685564078},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1684685564078},{"_id":"themes/butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1684685564078},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1684685564060},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1684685564060},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1684685564079},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1684685564079},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1684685564079},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1684685564079},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1684685564080},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1684685564080},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1684685564080},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1684685564081},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1684685564081},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1684685564081},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1684685564081},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1684685564081},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1684685564082},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1684685564082},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1684685564082},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1684685564082},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1684685564082},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1684685564083},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1684685564083},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1684685564083},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1684685564083},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1684685564098},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1684685564098},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1684685564101},{"_id":"themes/butterfly/source/js/main.js","hash":"dca55899b7c92ebee6191bef127ea5e2283ecc63","modified":1684685564100},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1684685564099},{"_id":"themes/butterfly/source/js/utils.js","hash":"7bec147ae2b313fbd0331d87018f99715368fc4b","modified":1684685564102},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1684685564057},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1684685564057},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1684685564057},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1684685564057},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1684685564057},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"68cda524337dfe2e1467318a4a6c124b4c3845a7","modified":1684685564058},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1684685564100},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1684685564099},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1684685564058},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1684685564058},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1684685564055},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1684685564056},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1684685564056},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1684685564056},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1684685564056},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1684685564056},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1684685564056},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1684685564056},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1684685564056},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1684685564059},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1684685564058},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1684685564059},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1684685564059},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1684685564059},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1684685564059},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1684685564060},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1684685564060},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1684685564061},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1684685564067},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1684685564071},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1684685564071},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1684685564071},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"13015a98d0d5e1ef2cec294231529010395b19de","modified":1684685564073},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1684685564074},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1684685564074},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1684685564074},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1684685564074},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1684685564074},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1684685564075},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1684685564075},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1684685564075},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1684685564076},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1684685564075},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1684685564076},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1684685564076},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1684685564076},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1684685564084},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"de10b113f9cb9a68d257a39d6409905acfd559ef","modified":1684685564084},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1684685564086},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1684685564084},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1684685564087},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1684685564087},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1684685564087},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1684685564087},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1684685564087},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1684685564088},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1684685564088},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"e24046fad288a13897195038cb7a63d1014cd7b8","modified":1684685564088},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1684685564088},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1684685564089},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1684685564089},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1684685564089},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"ca39e634668ed4fbb43267ec4782c2b55c44e698","modified":1684685564089},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":1684685564090},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1684685564090},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1684685564090},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1684685564091},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1684685564091},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"e4b9d6164e97b30c84e1218c7543c60f6b29edcc","modified":1684685564091},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1684685564091},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1684685564092},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1684685564091},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1684685564092},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"678e56ad2e46b630364540fc6a881d6801192dcd","modified":1684685564092},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1684685564093},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1684685564094},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1684685564094},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1684685564094},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1684685564094},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1684685564095},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1684685564095},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1684685564095},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1684685564095},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1684685564096},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1684685564097},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1684685564101},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1684685564061},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1684685564061},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1684685564101},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"4ff8e67cd1c9058c0c894737b9b247a812079ae2","modified":1684685564061},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1684685564061},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1684685564062},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1684685564062},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1684685564062},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1684685564062},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1684685564063},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1684685564063},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1684685564063},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1684685564063},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1684685564064},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"3ce0461534b786cb71d9141dff35fa5cb70e22b9","modified":1684685564064},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1684685564064},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1684685564064},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"90779382c8675e5a0b2d1ef2250294de926707f4","modified":1684685564064},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1684685564065},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1684685564064},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1684685564065},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1684685564065},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1684685564065},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1684685564066},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1684685564066},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1684685564066},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1684685564066},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1684685564067},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1684685564067},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1684685564067},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":1684685564067},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1684685564068},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1684685564068},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"3942d6643683a3c42bbb5f4cf4a7df21debb8498","modified":1684685564069},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d92bbf51626fcc5608b53273cf40db0b5b69c0d4","modified":1684685564068},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1684685564069},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1684685564070},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":1684685564068},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1684685564070},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1684685564070},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1684685564070},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1684685564070},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"531d7b6992a737742f7b3ae343e1f03aab947f4c","modified":1684685564071},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1684685564072},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1684685564072},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1684685564072},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1684685564072},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1684685564073},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1684685564073},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1684685564073},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1684685564073},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1684685564085},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1684685564085},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1684685564085},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1684685564086},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1684685564086},{"_id":"public/search.xml","hash":"3ad261cd168d348215c4030f8714a078bb5ffc57","modified":1685524919870},{"_id":"public/about_me.html","hash":"8cabe2673ba4f0dcb3b72f8e5b9ee48ddf19c721","modified":1685524919870},{"_id":"public/404.html","hash":"a95ad88c3608a65ebda42b4fee7a00eaa1bf0da4","modified":1685524919870},{"_id":"public/2023/05/30/ACL访问控制列表实践/index.html","hash":"abbb58a47f99007b9cb8e100258991418f341af5","modified":1685524919870},{"_id":"public/archives/index.html","hash":"ac93c6f979c402c1e95386600cbe852d30231887","modified":1685524919870},{"_id":"public/archives/2023/index.html","hash":"a3dda46a1e329b923e2c0d5a3bc1444a31bfc412","modified":1685524919870},{"_id":"public/archives/2023/05/index.html","hash":"bf26a3c0426b6cbf43a24ab75f3e0d0b3bdefec7","modified":1685524919870},{"_id":"public/2023/05/30/urllib3-Drop-support-for-OpenSSL-1-1-1排障记录/index.html","hash":"05c42f2044fdfc806724b16219f2006b4e0dfb9c","modified":1685524919870},{"_id":"public/2023/05/22/样式冲突太多，记一次前端CSS升级/index.html","hash":"4e3b0b7b7a546ca0f2b2dfff2b6078cfb940be70","modified":1685524919870},{"_id":"public/2023/05/22/hello-world/index.html","hash":"327531306c8b929cde5d9d48ce4b6195c2c1d876","modified":1685524919870},{"_id":"public/index.html","hash":"c8b9198fc2bdbf0c0c0b825fd3953302713a70d3","modified":1685524919870},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1685524919870},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1685524919870},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1685524919870},{"_id":"public/js/utils.js","hash":"7bec147ae2b313fbd0331d87018f99715368fc4b","modified":1685524919870},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685524919870},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1685524919870},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1685524919870},{"_id":"public/css/index.css","hash":"fd552930d5871350231499c76f05e632c4824431","modified":1685524919870},{"_id":"public/js/main.js","hash":"dca55899b7c92ebee6191bef127ea5e2283ecc63","modified":1685524919870},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1685524919870}],"Category":[],"Data":[],"Page":[{"_content":"## About Me\n\n2021，毕业于深圳大学，本科\n\n2021 - 至今， 先后就职于腾讯、富途，从事互联网行业，软件开发工作\n\nfull stack developer，崇尚人生不该设限，相信渺小的力量有一天也可以改变世界\n\n如果你想要联系我：862658354@qq.com","source":"about_me.md","raw":"## About Me\n\n2021，毕业于深圳大学，本科\n\n2021 - 至今， 先后就职于腾讯、富途，从事互联网行业，软件开发工作\n\nfull stack developer，崇尚人生不该设限，相信渺小的力量有一天也可以改变世界\n\n如果你想要联系我：862658354@qq.com","date":"2023-05-22T02:37:38.625Z","updated":"2023-05-22T02:37:38.625Z","path":"about_me.html","title":"","comments":1,"layout":"page","_id":"clibi0o0x00004bqbahn81lde","content":"<h2 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h2><p>2021，毕业于深圳大学，本科</p>\n<p>2021 - 至今， 先后就职于腾讯、富途，从事互联网行业，软件开发工作</p>\n<p>full stack developer，崇尚人生不该设限，相信渺小的力量有一天也可以改变世界</p>\n<p>如果你想要联系我：<a href=\"mailto:&#56;&#x36;&#50;&#x36;&#53;&#56;&#51;&#x35;&#x34;&#x40;&#x71;&#x71;&#x2e;&#99;&#111;&#x6d;\">&#56;&#x36;&#50;&#x36;&#53;&#56;&#51;&#x35;&#x34;&#x40;&#x71;&#x71;&#x2e;&#99;&#111;&#x6d;</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h2><p>2021，毕业于深圳大学，本科</p>\n<p>2021 - 至今， 先后就职于腾讯、富途，从事互联网行业，软件开发工作</p>\n<p>full stack developer，崇尚人生不该设限，相信渺小的力量有一天也可以改变世界</p>\n<p>如果你想要联系我：<a href=\"mailto:&#56;&#x36;&#50;&#x36;&#53;&#56;&#51;&#x35;&#x34;&#x40;&#x71;&#x71;&#x2e;&#99;&#111;&#x6d;\">&#56;&#x36;&#50;&#x36;&#53;&#56;&#51;&#x35;&#x34;&#x40;&#x71;&#x71;&#x2e;&#99;&#111;&#x6d;</a></p>\n"}],"Post":[{"title":"ACL访问控制列表实践","date":"2023-05-30T07:23:46.000Z","_content":"","source":"_posts/ACL访问控制列表实践.md","raw":"---\ntitle: ACL访问控制列表实践\ndate: 2023-05-30 15:23:46\ntags:\n---\n","slug":"ACL访问控制列表实践","published":1,"updated":"2023-05-30T07:23:46.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibi0o1000014bqbbmx2hkd1","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-05-21T16:09:09.765Z","updated":"2023-05-22T01:54:18.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibi0o1300024bqbg3p99q3b","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"样式冲突太多，记一次前端CSS升级","date":"2023-05-22T01:50:27.000Z","_content":"### 前言\n目前QAPM平台前端使用的是原生CSS+BEM命名，在多人协作的模式下，容易出现**样式冲突**。为了减少这一类的问题，提升研效，我调研了业界上主流的7种CSS解决方案，并将最终升级方案落地到了工程中。\n\n### 样式冲突的原因\n目前遇到的样式冲突的原因：\n1. 多人协作，样式互相污染，这是项目中的主要问题。用开发规范来限定、用CR流程来保障，并不可靠\n2. 引用大量第三方组件库，组件库对CSS的使用不规范。比如bee.css中使用了大量```！important```，破坏了项目中的样式优先级；rsuit是前端非常强大的表格组件库，他的css文件中也有直接覆盖底层样式的写法```label{ marign:2px }```\n3. 直接使用组件库引入的css文件，比如```import material-icons.css```，如果引用顺序靠后，这些文件可能会覆盖开发人员手写的样式。\n4. ...\n\n### 调研方案\nCSS作为前端三剑客之一，几乎是所有前端同学最先学习的样式表语言。在生产环境的项目工程中，很少见到直接原生使用CSS的。但目前业界还没有通用的CSS工程化方案。这篇文章先简单介绍下7种在React/Next.js中较为流行使用CSS的方式，并说说他们的优缺点。\n\n### 原生 CSS\n这是一种用选择器来划分css作用域的方式。\n- 缺点：\n1. 作用域问题\nCSS样式之间会层叠覆盖，需要用大量的classname来指定选择器，来限定CSS的作用域范围。频繁的命名给开发人员增加不少心智负担，而且容易搞错搞重复。\n```css\n// pure css example\n.card {\n\t/* styles */\n}\n.card__header {\n\t/* styles */\n}\n.card--focus {\n\t/* styles */\n}\n```\n采用BEM规则来进行命名或许会简单些。\n但在需要维护特别多样式的时候，BEM还是不够用。尤其是当代码中开始大量出现```!important```这种破坏优先级的东西的时候。\n```css\n// css with !important\n.card {\n\tcolor: blue !important;\n}\n.card {\n\tcolor: red;\n}\n```\n2. 打包体积大\n使用大量冗长的原生CSS，可能会导致\n打出来的包变大。包越大，项目自然跑的就越慢。\n\n### CSS MODULES\n这是一种在原生CSS的基础上，通过modules（也可以理解为文件）来划分CSS的作用域。\n\n首先先建一些以.module.css结尾的文件，这些文件里的样式可以只针对某个组件（某个module）生效。这种做法在Next.js尤为常见，因为CSS modules在Next.js是可以开箱即用的。\n\n下面是一个例子，在```Home.module.css```和```other.module.css```对**同样的类名**书写样式，也不会产生冲突。\n```css\n@file Home.module.css\n.page {\n\tcolor: bule;\n}\n```\n```css\n@file other.module.css\n.page {\n\tcolor: yellow;\n}\n```\n```js\n// 只会生效这里import的样式\nimport styles from '../styles/Home.module.css';\nexport default function Home(){\n\treturn (\n\t\t// 蓝色\n\t\t<div className={styles.page}>\n\t\t\t<h1> Home Page </h1>\n\t\t<div>\n\t)\n}\n```\n- 优势：\n\n1. 当需要复用样式的时候，不同的组件可以import同一份样式文件，减少很多重复样式代码，减轻打包体积～\n2. 说到样式复用，CSS modules还有个特殊的composes属性，能引入别的module的css样式，也能重写（override）。\n```css\n.page {\n\tcomposes: className from \"./shared.css\"\n}\n```\n- 缺点：\n1. 不够“程序化”\nCSS modules在原生CSS的基础上增加了以modules（文件）划分的作用域，解决了作用域问题，但仍逃不过在单个module内以原生的方式书写CSS。原生的CSS只能纯纯的枚举出每一条样式，如果能在书写CSS的时候也支持一些程序特性岂不是更好？比如最常用的循环、遍历、函数、继承...\n\n### CSS PREPROCESSOR 预处理器\nSass、Less、Stylus... 这些预处理器就是为了解决CSS不够“程序化”而诞生的。他们允许你用一种不一样的语法来写CSS，之后再经过编译转化成原生CSS。\n\n这里是一个例子：\n```shell\n// 只需一键安装sass\n$ npm install sass\n```\n```css\n// 然后把原本的css后缀文件改成scss\n// 就可以直接使用sass的方式来编写css啦，比如变量名、循环、...\n@ file Home.module.scss\n\n$ primary-color: red;\n$ font-stack：Helvetica\n\nbody {\n\tfont: 100% $font-stack;\n\tcolor: $primary-color;\n}\n```\n- 优势：\n1. 可以用变量、继承、循环、函数、...等程序特性\n- 缺点：\n1. 学习成本\n每种预处理器都有各自特定的语法，虽然是用一种类CSS的语言来编写，但总有有些差异。这意味着开发人员必须配合工具掌握新的语法。\n2. 样式和项目代码微微割裂\n在解决完作用域、程序化问题后，样式在前端项目中完完全全的独立出来了，似乎少了一些联动能力。既然我们有JSX这样整合JS和HTML的合体语言，为什么不能把CSS也合体进来呢？\n\n### CSS IN JS\n这是一种把CSS写进JS的解决方案，就像把HTML写进JS后就有了JSX。这一类的库有styled components、emotion、jss、style tron、...\n\n举个使用styled jsx的例子：\n```js\nimport styles from '../styles/Home.module.css';\n\nexport default function Home(){\n\tconst [color, serColor] = useState('orange');\n\treturn (\n\t\t<div className={styles.page}>\n\t\t\t<style jsx>{`\n\t\t\t\th1 {\n\t\t\t\t\t// 取的是组件state，可以随state变化！\n\t\t\t\t\tcolor: ${color};\n\t\t\t\t}\n\t\t\t`}</style>\n\t\t\t<h1> Home Page </h1>\n\t\t<div>\n\t)\n}\n```\n- 优势：\n1. 轻松能实现的程序化能力\n在sass里的程序化能力，CSS in JS都能做到，甚至更强，这种方式可以直接使用JS书写这种程序化语言，也不需要额外学习成本。\n2. 创建动态样式\n在sass里，程序代码或许和样式文件是完全独立开来的。而使用CSS in JS，样式和JS强绑定，我们的样式能够跟着代码、跟着组件的state等特性实现动态样式，特别灵活！\n3. 不会有作用域问题\n类似module，CSS in JS的样式只会绑定在样式定义的组件内，不会污染全局样式～\n- 缺点：\n1. CSS和JS混写，代码管理困难。\n\n### UTILITY CLASSES 原子类\n时下最火的新概念就是tailwindcss、windi css这些原子类CSS库，能够提供大量的原子类样式，帮助我们快速构建样式。\n```js\n// 配置好tailwind之后\nexport default function Home(){\n\treturn (\n\t\t// 在这里写上tailwind的原子类classname，而不需要写样式\n\t\t<div className=\"text-5xl font-bold\">\n\t\t<h1> Home Page </h1>\n\t\t<div>\n\t)\n}\n```\n- 缺点\n1. 需要比较麻烦的额外配置\n2. 打包后，生成的HTML文件可读性非常非常低 \n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77ff846122eb448ab0d3129739c252e1~tplv-k3u1fbpfcp-watermark.image?)\n3. 没有任何的内置组件\n- 优势\n1. 打包时，能自动优化，去除没有使用的css样式，减轻打包产物体积。\n\n### CSS FRAMEWORK\nbootstrap、bulma、这一类库既能提供特定的样式主题，又有内置的组件，比如bottom、cards、...等等。我个人在自己倒腾东西的时候非常喜欢用这一类框架，因为实在是太方便啦！这种方式在生产上几乎很少采用，因为开发人员往往需要根据产品原型来绘制前端界面，而不是这些框架固定的样式。另外采用这种方式，也容易对线上性能造成比较大影响。\n```shell\n// 想使用这一类框架，只用一键安装上\n$ npm install bootstrap\n```\n```js\n// 引入框架的样式文件\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function Home(){\n\treturn (\n\t\t// 想要使用的样式都在bootstrap中用各种classname封装好啦，直接调用boostrap的预留classname，搞定\n\t\t<div className=\"alert alert-primary\">\n\t\t<h1> Home Page </h1>\n\t\t<div>\n\t)\n}\n```\n- 缺点：\n1. 在只使用bootstrap来搭建组件和修改样式的话，会不太方便\n由于这类框架已经自带了许多预留组件，而bootstrap的样式又是用classname来获取的。假设我需要频繁使用```<Bottom />```组件，却又不想在每次使用的时候，都重复的写相同的classname，那么就会将他们封装成```<CustomButtom />```。这么做的话，项目代码中就可能会有大量的仅仅是为了封装classname而存在的组件。\n2. 打包文件过大\n整个bootstrap文件是直接import进来的。因此在打包时，会把大量没使用到的classname也打包进来，会造成打包产物较大～\n\n### 组件库\n这是大家最熟悉的方式啦，ant design、material design、t design、rebase、....\n\n### 最终落地的升级方案\n不同的CSS处理方式各有优劣，在实际开发中，可以自行选择和搭配合适的CSS处理手段。\n\n在我目前工作中，是将项目的原生CSS，升级成css module + less 的组合，这样既能解决当前项目的核心矛盾：作用域和样式污染问题，又能让CSS的编写过程变得更“程序”，比如使用变量、继承等特性。\n\n没有使用css in js 是因为当前项目没有主题切换和动态样式这样场景，此外css in js 会让一个组件文件变得非常冗长，尤其是目前我的工作特别多复杂图表的封装，仅jsx部分代码行数已经非常长，再引入CSS代码容易变得更混乱。我个人也更加偏向能用独立文件区分出CSS代码的方式，这样展示出更好的项目分层。\n\n没有使用原子类的理由就更简单了，配置麻烦，可读性低，而且对团队内每个人都有较高的学习成本，不方便团队管理，直接pass了。\n\n在前端工程开发的过程中，面对多人协作的场景，建立标准和团队内的规范是非常重要的一个环节。尤其当前业界的前端，就是没有通用标准的情况下，影响项目工程稳健性的往往是缺乏规范和标准，而不是开发人员的水平。在我工作的项目中，最初就是因为大量人员流动，大家在项目中各按各自的方式写CSS，导致在一个项目中存在3种以上CSS写法，非常难维护，也出现了样式互相污染、互相冲突的情况，所以才有了这次对CSS的调研，以及对项目进行升级和改造的工作。\n\n\n附上一些参考资料：\n\nhttps://webflow.com/blog/class-naming-101-bem\n\nhttps://www.nextjs.cn/\n\nhttps://www.tailwindcss.cn/\n\nhttps://www.youtube.com/watch?v=ouncVBiye_M\n\nhttps://www.youtube.com/watch?v=hdGsFpZ0J2E\n","source":"_posts/样式冲突太多，记一次前端CSS升级.md","raw":"---\ntitle: 样式冲突太多，记一次前端CSS升级\ndate: 2023-05-22 09:50:27\ntags:\n---\n### 前言\n目前QAPM平台前端使用的是原生CSS+BEM命名，在多人协作的模式下，容易出现**样式冲突**。为了减少这一类的问题，提升研效，我调研了业界上主流的7种CSS解决方案，并将最终升级方案落地到了工程中。\n\n### 样式冲突的原因\n目前遇到的样式冲突的原因：\n1. 多人协作，样式互相污染，这是项目中的主要问题。用开发规范来限定、用CR流程来保障，并不可靠\n2. 引用大量第三方组件库，组件库对CSS的使用不规范。比如bee.css中使用了大量```！important```，破坏了项目中的样式优先级；rsuit是前端非常强大的表格组件库，他的css文件中也有直接覆盖底层样式的写法```label{ marign:2px }```\n3. 直接使用组件库引入的css文件，比如```import material-icons.css```，如果引用顺序靠后，这些文件可能会覆盖开发人员手写的样式。\n4. ...\n\n### 调研方案\nCSS作为前端三剑客之一，几乎是所有前端同学最先学习的样式表语言。在生产环境的项目工程中，很少见到直接原生使用CSS的。但目前业界还没有通用的CSS工程化方案。这篇文章先简单介绍下7种在React/Next.js中较为流行使用CSS的方式，并说说他们的优缺点。\n\n### 原生 CSS\n这是一种用选择器来划分css作用域的方式。\n- 缺点：\n1. 作用域问题\nCSS样式之间会层叠覆盖，需要用大量的classname来指定选择器，来限定CSS的作用域范围。频繁的命名给开发人员增加不少心智负担，而且容易搞错搞重复。\n```css\n// pure css example\n.card {\n\t/* styles */\n}\n.card__header {\n\t/* styles */\n}\n.card--focus {\n\t/* styles */\n}\n```\n采用BEM规则来进行命名或许会简单些。\n但在需要维护特别多样式的时候，BEM还是不够用。尤其是当代码中开始大量出现```!important```这种破坏优先级的东西的时候。\n```css\n// css with !important\n.card {\n\tcolor: blue !important;\n}\n.card {\n\tcolor: red;\n}\n```\n2. 打包体积大\n使用大量冗长的原生CSS，可能会导致\n打出来的包变大。包越大，项目自然跑的就越慢。\n\n### CSS MODULES\n这是一种在原生CSS的基础上，通过modules（也可以理解为文件）来划分CSS的作用域。\n\n首先先建一些以.module.css结尾的文件，这些文件里的样式可以只针对某个组件（某个module）生效。这种做法在Next.js尤为常见，因为CSS modules在Next.js是可以开箱即用的。\n\n下面是一个例子，在```Home.module.css```和```other.module.css```对**同样的类名**书写样式，也不会产生冲突。\n```css\n@file Home.module.css\n.page {\n\tcolor: bule;\n}\n```\n```css\n@file other.module.css\n.page {\n\tcolor: yellow;\n}\n```\n```js\n// 只会生效这里import的样式\nimport styles from '../styles/Home.module.css';\nexport default function Home(){\n\treturn (\n\t\t// 蓝色\n\t\t<div className={styles.page}>\n\t\t\t<h1> Home Page </h1>\n\t\t<div>\n\t)\n}\n```\n- 优势：\n\n1. 当需要复用样式的时候，不同的组件可以import同一份样式文件，减少很多重复样式代码，减轻打包体积～\n2. 说到样式复用，CSS modules还有个特殊的composes属性，能引入别的module的css样式，也能重写（override）。\n```css\n.page {\n\tcomposes: className from \"./shared.css\"\n}\n```\n- 缺点：\n1. 不够“程序化”\nCSS modules在原生CSS的基础上增加了以modules（文件）划分的作用域，解决了作用域问题，但仍逃不过在单个module内以原生的方式书写CSS。原生的CSS只能纯纯的枚举出每一条样式，如果能在书写CSS的时候也支持一些程序特性岂不是更好？比如最常用的循环、遍历、函数、继承...\n\n### CSS PREPROCESSOR 预处理器\nSass、Less、Stylus... 这些预处理器就是为了解决CSS不够“程序化”而诞生的。他们允许你用一种不一样的语法来写CSS，之后再经过编译转化成原生CSS。\n\n这里是一个例子：\n```shell\n// 只需一键安装sass\n$ npm install sass\n```\n```css\n// 然后把原本的css后缀文件改成scss\n// 就可以直接使用sass的方式来编写css啦，比如变量名、循环、...\n@ file Home.module.scss\n\n$ primary-color: red;\n$ font-stack：Helvetica\n\nbody {\n\tfont: 100% $font-stack;\n\tcolor: $primary-color;\n}\n```\n- 优势：\n1. 可以用变量、继承、循环、函数、...等程序特性\n- 缺点：\n1. 学习成本\n每种预处理器都有各自特定的语法，虽然是用一种类CSS的语言来编写，但总有有些差异。这意味着开发人员必须配合工具掌握新的语法。\n2. 样式和项目代码微微割裂\n在解决完作用域、程序化问题后，样式在前端项目中完完全全的独立出来了，似乎少了一些联动能力。既然我们有JSX这样整合JS和HTML的合体语言，为什么不能把CSS也合体进来呢？\n\n### CSS IN JS\n这是一种把CSS写进JS的解决方案，就像把HTML写进JS后就有了JSX。这一类的库有styled components、emotion、jss、style tron、...\n\n举个使用styled jsx的例子：\n```js\nimport styles from '../styles/Home.module.css';\n\nexport default function Home(){\n\tconst [color, serColor] = useState('orange');\n\treturn (\n\t\t<div className={styles.page}>\n\t\t\t<style jsx>{`\n\t\t\t\th1 {\n\t\t\t\t\t// 取的是组件state，可以随state变化！\n\t\t\t\t\tcolor: ${color};\n\t\t\t\t}\n\t\t\t`}</style>\n\t\t\t<h1> Home Page </h1>\n\t\t<div>\n\t)\n}\n```\n- 优势：\n1. 轻松能实现的程序化能力\n在sass里的程序化能力，CSS in JS都能做到，甚至更强，这种方式可以直接使用JS书写这种程序化语言，也不需要额外学习成本。\n2. 创建动态样式\n在sass里，程序代码或许和样式文件是完全独立开来的。而使用CSS in JS，样式和JS强绑定，我们的样式能够跟着代码、跟着组件的state等特性实现动态样式，特别灵活！\n3. 不会有作用域问题\n类似module，CSS in JS的样式只会绑定在样式定义的组件内，不会污染全局样式～\n- 缺点：\n1. CSS和JS混写，代码管理困难。\n\n### UTILITY CLASSES 原子类\n时下最火的新概念就是tailwindcss、windi css这些原子类CSS库，能够提供大量的原子类样式，帮助我们快速构建样式。\n```js\n// 配置好tailwind之后\nexport default function Home(){\n\treturn (\n\t\t// 在这里写上tailwind的原子类classname，而不需要写样式\n\t\t<div className=\"text-5xl font-bold\">\n\t\t<h1> Home Page </h1>\n\t\t<div>\n\t)\n}\n```\n- 缺点\n1. 需要比较麻烦的额外配置\n2. 打包后，生成的HTML文件可读性非常非常低 \n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77ff846122eb448ab0d3129739c252e1~tplv-k3u1fbpfcp-watermark.image?)\n3. 没有任何的内置组件\n- 优势\n1. 打包时，能自动优化，去除没有使用的css样式，减轻打包产物体积。\n\n### CSS FRAMEWORK\nbootstrap、bulma、这一类库既能提供特定的样式主题，又有内置的组件，比如bottom、cards、...等等。我个人在自己倒腾东西的时候非常喜欢用这一类框架，因为实在是太方便啦！这种方式在生产上几乎很少采用，因为开发人员往往需要根据产品原型来绘制前端界面，而不是这些框架固定的样式。另外采用这种方式，也容易对线上性能造成比较大影响。\n```shell\n// 想使用这一类框架，只用一键安装上\n$ npm install bootstrap\n```\n```js\n// 引入框架的样式文件\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function Home(){\n\treturn (\n\t\t// 想要使用的样式都在bootstrap中用各种classname封装好啦，直接调用boostrap的预留classname，搞定\n\t\t<div className=\"alert alert-primary\">\n\t\t<h1> Home Page </h1>\n\t\t<div>\n\t)\n}\n```\n- 缺点：\n1. 在只使用bootstrap来搭建组件和修改样式的话，会不太方便\n由于这类框架已经自带了许多预留组件，而bootstrap的样式又是用classname来获取的。假设我需要频繁使用```<Bottom />```组件，却又不想在每次使用的时候，都重复的写相同的classname，那么就会将他们封装成```<CustomButtom />```。这么做的话，项目代码中就可能会有大量的仅仅是为了封装classname而存在的组件。\n2. 打包文件过大\n整个bootstrap文件是直接import进来的。因此在打包时，会把大量没使用到的classname也打包进来，会造成打包产物较大～\n\n### 组件库\n这是大家最熟悉的方式啦，ant design、material design、t design、rebase、....\n\n### 最终落地的升级方案\n不同的CSS处理方式各有优劣，在实际开发中，可以自行选择和搭配合适的CSS处理手段。\n\n在我目前工作中，是将项目的原生CSS，升级成css module + less 的组合，这样既能解决当前项目的核心矛盾：作用域和样式污染问题，又能让CSS的编写过程变得更“程序”，比如使用变量、继承等特性。\n\n没有使用css in js 是因为当前项目没有主题切换和动态样式这样场景，此外css in js 会让一个组件文件变得非常冗长，尤其是目前我的工作特别多复杂图表的封装，仅jsx部分代码行数已经非常长，再引入CSS代码容易变得更混乱。我个人也更加偏向能用独立文件区分出CSS代码的方式，这样展示出更好的项目分层。\n\n没有使用原子类的理由就更简单了，配置麻烦，可读性低，而且对团队内每个人都有较高的学习成本，不方便团队管理，直接pass了。\n\n在前端工程开发的过程中，面对多人协作的场景，建立标准和团队内的规范是非常重要的一个环节。尤其当前业界的前端，就是没有通用标准的情况下，影响项目工程稳健性的往往是缺乏规范和标准，而不是开发人员的水平。在我工作的项目中，最初就是因为大量人员流动，大家在项目中各按各自的方式写CSS，导致在一个项目中存在3种以上CSS写法，非常难维护，也出现了样式互相污染、互相冲突的情况，所以才有了这次对CSS的调研，以及对项目进行升级和改造的工作。\n\n\n附上一些参考资料：\n\nhttps://webflow.com/blog/class-naming-101-bem\n\nhttps://www.nextjs.cn/\n\nhttps://www.tailwindcss.cn/\n\nhttps://www.youtube.com/watch?v=ouncVBiye_M\n\nhttps://www.youtube.com/watch?v=hdGsFpZ0J2E\n","slug":"样式冲突太多，记一次前端CSS升级","published":1,"updated":"2023-05-22T02:03:00.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibi0o1g00034bqbe94uava6","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目前QAPM平台前端使用的是原生CSS+BEM命名，在多人协作的模式下，容易出现<strong>样式冲突</strong>。为了减少这一类的问题，提升研效，我调研了业界上主流的7种CSS解决方案，并将最终升级方案落地到了工程中。</p>\n<h3 id=\"样式冲突的原因\"><a href=\"#样式冲突的原因\" class=\"headerlink\" title=\"样式冲突的原因\"></a>样式冲突的原因</h3><p>目前遇到的样式冲突的原因：</p>\n<ol>\n<li>多人协作，样式互相污染，这是项目中的主要问题。用开发规范来限定、用CR流程来保障，并不可靠</li>\n<li>引用大量第三方组件库，组件库对CSS的使用不规范。比如bee.css中使用了大量<code>！important</code>，破坏了项目中的样式优先级；rsuit是前端非常强大的表格组件库，他的css文件中也有直接覆盖底层样式的写法<code>label&#123; marign:2px &#125;</code></li>\n<li>直接使用组件库引入的css文件，比如<code>import material-icons.css</code>，如果引用顺序靠后，这些文件可能会覆盖开发人员手写的样式。</li>\n<li>…</li>\n</ol>\n<h3 id=\"调研方案\"><a href=\"#调研方案\" class=\"headerlink\" title=\"调研方案\"></a>调研方案</h3><p>CSS作为前端三剑客之一，几乎是所有前端同学最先学习的样式表语言。在生产环境的项目工程中，很少见到直接原生使用CSS的。但目前业界还没有通用的CSS工程化方案。这篇文章先简单介绍下7种在React&#x2F;Next.js中较为流行使用CSS的方式，并说说他们的优缺点。</p>\n<h3 id=\"原生-CSS\"><a href=\"#原生-CSS\" class=\"headerlink\" title=\"原生 CSS\"></a>原生 CSS</h3><p>这是一种用选择器来划分css作用域的方式。</p>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>作用域问题<br>CSS样式之间会层叠覆盖，需要用大量的classname来指定选择器，来限定CSS的作用域范围。频繁的命名给开发人员增加不少心智负担，而且容易搞错搞重复。<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// pure css example</span><br><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* styles */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.card__header</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* styles */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.card--focus</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* styles */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n采用BEM规则来进行命名或许会简单些。<br>但在需要维护特别多样式的时候，BEM还是不够用。尤其是当代码中开始大量出现<code>!important</code>这种破坏优先级的东西的时候。<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// css with !important</span><br><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: blue <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>打包体积大<br>使用大量冗长的原生CSS，可能会导致<br>打出来的包变大。包越大，项目自然跑的就越慢。</li>\n</ol>\n<h3 id=\"CSS-MODULES\"><a href=\"#CSS-MODULES\" class=\"headerlink\" title=\"CSS MODULES\"></a>CSS MODULES</h3><p>这是一种在原生CSS的基础上，通过modules（也可以理解为文件）来划分CSS的作用域。</p>\n<p>首先先建一些以.module.css结尾的文件，这些文件里的样式可以只针对某个组件（某个module）生效。这种做法在Next.js尤为常见，因为CSS modules在Next.js是可以开箱即用的。</p>\n<p>下面是一个例子，在<code>Home.module.css</code>和<code>other.module.css</code>对<strong>同样的类名</strong>书写样式，也不会产生冲突。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@file</span> Home.module.css</span><br><span class=\"line\">.page &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: bule;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@file</span> other.module.css</span><br><span class=\"line\">.page &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只会生效这里import的样式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../styles/Home.module.css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"comment\">// 蓝色</span></span><br><span class=\"line\">\t\t&lt;div className=&#123;styles.page&#125;&gt;</span><br><span class=\"line\">\t\t\t&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优势：</li>\n</ul>\n<ol>\n<li>当需要复用样式的时候，不同的组件可以import同一份样式文件，减少很多重复样式代码，减轻打包体积～</li>\n<li>说到样式复用，CSS modules还有个特殊的composes属性，能引入别的module的css样式，也能重写（override）。<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.page</span> &#123;</span><br><span class=\"line\">\tcomposes: className from <span class=\"string\">&quot;./shared.css&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>不够“程序化”<br>CSS modules在原生CSS的基础上增加了以modules（文件）划分的作用域，解决了作用域问题，但仍逃不过在单个module内以原生的方式书写CSS。原生的CSS只能纯纯的枚举出每一条样式，如果能在书写CSS的时候也支持一些程序特性岂不是更好？比如最常用的循环、遍历、函数、继承…</li>\n</ol>\n<h3 id=\"CSS-PREPROCESSOR-预处理器\"><a href=\"#CSS-PREPROCESSOR-预处理器\" class=\"headerlink\" title=\"CSS PREPROCESSOR 预处理器\"></a>CSS PREPROCESSOR 预处理器</h3><p>Sass、Less、Stylus… 这些预处理器就是为了解决CSS不够“程序化”而诞生的。他们允许你用一种不一样的语法来写CSS，之后再经过编译转化成原生CSS。</p>\n<p>这里是一个例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 只需一键安装sass</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install sass</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 然后把原本的css后缀文件改成scss</span><br><span class=\"line\">// 就可以直接使用sass的方式来编写css啦，比如变量名、循环、...</span><br><span class=\"line\">@ file Home.module.scss</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"attribute\">primary-color</span>: red;</span><br><span class=\"line\">$ <span class=\"attribute\">font</span>-stack：Helvetica</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font</span>: <span class=\"number\">100%</span> $font-stack;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: $primary-color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优势：</li>\n</ul>\n<ol>\n<li>可以用变量、继承、循环、函数、…等程序特性</li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>学习成本<br>每种预处理器都有各自特定的语法，虽然是用一种类CSS的语言来编写，但总有有些差异。这意味着开发人员必须配合工具掌握新的语法。</li>\n<li>样式和项目代码微微割裂<br>在解决完作用域、程序化问题后，样式在前端项目中完完全全的独立出来了，似乎少了一些联动能力。既然我们有JSX这样整合JS和HTML的合体语言，为什么不能把CSS也合体进来呢？</li>\n</ol>\n<h3 id=\"CSS-IN-JS\"><a href=\"#CSS-IN-JS\" class=\"headerlink\" title=\"CSS IN JS\"></a>CSS IN JS</h3><p>这是一种把CSS写进JS的解决方案，就像把HTML写进JS后就有了JSX。这一类的库有styled components、emotion、jss、style tron、…</p>\n<p>举个使用styled jsx的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../styles/Home.module.css&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> [color, serColor] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;orange&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t&lt;div className=&#123;styles.page&#125;&gt;</span><br><span class=\"line\">\t\t\t&lt;style jsx&gt;&#123;`</span><br><span class=\"line\">\t\t\t\th1 &#123;</span><br><span class=\"line\">\t\t\t\t\t// 取的是组件state，可以随state变化！</span><br><span class=\"line\">\t\t\t\t\tcolor: $&#123;color&#125;;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t`&#125;&lt;/style&gt;</span><br><span class=\"line\">\t\t\t&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优势：</li>\n</ul>\n<ol>\n<li>轻松能实现的程序化能力<br>在sass里的程序化能力，CSS in JS都能做到，甚至更强，这种方式可以直接使用JS书写这种程序化语言，也不需要额外学习成本。</li>\n<li>创建动态样式<br>在sass里，程序代码或许和样式文件是完全独立开来的。而使用CSS in JS，样式和JS强绑定，我们的样式能够跟着代码、跟着组件的state等特性实现动态样式，特别灵活！</li>\n<li>不会有作用域问题<br>类似module，CSS in JS的样式只会绑定在样式定义的组件内，不会污染全局样式～</li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>CSS和JS混写，代码管理困难。</li>\n</ol>\n<h3 id=\"UTILITY-CLASSES-原子类\"><a href=\"#UTILITY-CLASSES-原子类\" class=\"headerlink\" title=\"UTILITY CLASSES 原子类\"></a>UTILITY CLASSES 原子类</h3><p>时下最火的新概念就是tailwindcss、windi css这些原子类CSS库，能够提供大量的原子类样式，帮助我们快速构建样式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置好tailwind之后</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"comment\">// 在这里写上tailwind的原子类classname，而不需要写样式</span></span><br><span class=\"line\">\t\t&lt;div className=&quot;text-5xl font-bold&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点</li>\n</ul>\n<ol>\n<li>需要比较麻烦的额外配置</li>\n<li>打包后，生成的HTML文件可读性非常非常低<br><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77ff846122eb448ab0d3129739c252e1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></li>\n<li>没有任何的内置组件</li>\n</ol>\n<ul>\n<li>优势</li>\n</ul>\n<ol>\n<li>打包时，能自动优化，去除没有使用的css样式，减轻打包产物体积。</li>\n</ol>\n<h3 id=\"CSS-FRAMEWORK\"><a href=\"#CSS-FRAMEWORK\" class=\"headerlink\" title=\"CSS FRAMEWORK\"></a>CSS FRAMEWORK</h3><p>bootstrap、bulma、这一类库既能提供特定的样式主题，又有内置的组件，比如bottom、cards、…等等。我个人在自己倒腾东西的时候非常喜欢用这一类框架，因为实在是太方便啦！这种方式在生产上几乎很少采用，因为开发人员往往需要根据产品原型来绘制前端界面，而不是这些框架固定的样式。另外采用这种方式，也容易对线上性能造成比较大影响。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 想使用这一类框架，只用一键安装上</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install bootstrap</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入框架的样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"comment\">// 想要使用的样式都在bootstrap中用各种classname封装好啦，直接调用boostrap的预留classname，搞定</span></span><br><span class=\"line\">\t\t&lt;div className=&quot;alert alert-primary&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>在只使用bootstrap来搭建组件和修改样式的话，会不太方便<br>由于这类框架已经自带了许多预留组件，而bootstrap的样式又是用classname来获取的。假设我需要频繁使用<code>&lt;Bottom /&gt;</code>组件，却又不想在每次使用的时候，都重复的写相同的classname，那么就会将他们封装成<code>&lt;CustomButtom /&gt;</code>。这么做的话，项目代码中就可能会有大量的仅仅是为了封装classname而存在的组件。</li>\n<li>打包文件过大<br>整个bootstrap文件是直接import进来的。因此在打包时，会把大量没使用到的classname也打包进来，会造成打包产物较大～</li>\n</ol>\n<h3 id=\"组件库\"><a href=\"#组件库\" class=\"headerlink\" title=\"组件库\"></a>组件库</h3><p>这是大家最熟悉的方式啦，ant design、material design、t design、rebase、….</p>\n<h3 id=\"最终落地的升级方案\"><a href=\"#最终落地的升级方案\" class=\"headerlink\" title=\"最终落地的升级方案\"></a>最终落地的升级方案</h3><p>不同的CSS处理方式各有优劣，在实际开发中，可以自行选择和搭配合适的CSS处理手段。</p>\n<p>在我目前工作中，是将项目的原生CSS，升级成css module + less 的组合，这样既能解决当前项目的核心矛盾：作用域和样式污染问题，又能让CSS的编写过程变得更“程序”，比如使用变量、继承等特性。</p>\n<p>没有使用css in js 是因为当前项目没有主题切换和动态样式这样场景，此外css in js 会让一个组件文件变得非常冗长，尤其是目前我的工作特别多复杂图表的封装，仅jsx部分代码行数已经非常长，再引入CSS代码容易变得更混乱。我个人也更加偏向能用独立文件区分出CSS代码的方式，这样展示出更好的项目分层。</p>\n<p>没有使用原子类的理由就更简单了，配置麻烦，可读性低，而且对团队内每个人都有较高的学习成本，不方便团队管理，直接pass了。</p>\n<p>在前端工程开发的过程中，面对多人协作的场景，建立标准和团队内的规范是非常重要的一个环节。尤其当前业界的前端，就是没有通用标准的情况下，影响项目工程稳健性的往往是缺乏规范和标准，而不是开发人员的水平。在我工作的项目中，最初就是因为大量人员流动，大家在项目中各按各自的方式写CSS，导致在一个项目中存在3种以上CSS写法，非常难维护，也出现了样式互相污染、互相冲突的情况，所以才有了这次对CSS的调研，以及对项目进行升级和改造的工作。</p>\n<p>附上一些参考资料：</p>\n<p><a href=\"https://webflow.com/blog/class-naming-101-bem\">https://webflow.com/blog/class-naming-101-bem</a></p>\n<p><a href=\"https://www.nextjs.cn/\">https://www.nextjs.cn/</a></p>\n<p><a href=\"https://www.tailwindcss.cn/\">https://www.tailwindcss.cn/</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=ouncVBiye_M\">https://www.youtube.com/watch?v=ouncVBiye_M</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=hdGsFpZ0J2E\">https://www.youtube.com/watch?v=hdGsFpZ0J2E</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目前QAPM平台前端使用的是原生CSS+BEM命名，在多人协作的模式下，容易出现<strong>样式冲突</strong>。为了减少这一类的问题，提升研效，我调研了业界上主流的7种CSS解决方案，并将最终升级方案落地到了工程中。</p>\n<h3 id=\"样式冲突的原因\"><a href=\"#样式冲突的原因\" class=\"headerlink\" title=\"样式冲突的原因\"></a>样式冲突的原因</h3><p>目前遇到的样式冲突的原因：</p>\n<ol>\n<li>多人协作，样式互相污染，这是项目中的主要问题。用开发规范来限定、用CR流程来保障，并不可靠</li>\n<li>引用大量第三方组件库，组件库对CSS的使用不规范。比如bee.css中使用了大量<code>！important</code>，破坏了项目中的样式优先级；rsuit是前端非常强大的表格组件库，他的css文件中也有直接覆盖底层样式的写法<code>label&#123; marign:2px &#125;</code></li>\n<li>直接使用组件库引入的css文件，比如<code>import material-icons.css</code>，如果引用顺序靠后，这些文件可能会覆盖开发人员手写的样式。</li>\n<li>…</li>\n</ol>\n<h3 id=\"调研方案\"><a href=\"#调研方案\" class=\"headerlink\" title=\"调研方案\"></a>调研方案</h3><p>CSS作为前端三剑客之一，几乎是所有前端同学最先学习的样式表语言。在生产环境的项目工程中，很少见到直接原生使用CSS的。但目前业界还没有通用的CSS工程化方案。这篇文章先简单介绍下7种在React&#x2F;Next.js中较为流行使用CSS的方式，并说说他们的优缺点。</p>\n<h3 id=\"原生-CSS\"><a href=\"#原生-CSS\" class=\"headerlink\" title=\"原生 CSS\"></a>原生 CSS</h3><p>这是一种用选择器来划分css作用域的方式。</p>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>作用域问题<br>CSS样式之间会层叠覆盖，需要用大量的classname来指定选择器，来限定CSS的作用域范围。频繁的命名给开发人员增加不少心智负担，而且容易搞错搞重复。<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// pure css example</span><br><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* styles */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.card__header</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* styles */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.card--focus</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* styles */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n采用BEM规则来进行命名或许会简单些。<br>但在需要维护特别多样式的时候，BEM还是不够用。尤其是当代码中开始大量出现<code>!important</code>这种破坏优先级的东西的时候。<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// css with !important</span><br><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: blue <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>打包体积大<br>使用大量冗长的原生CSS，可能会导致<br>打出来的包变大。包越大，项目自然跑的就越慢。</li>\n</ol>\n<h3 id=\"CSS-MODULES\"><a href=\"#CSS-MODULES\" class=\"headerlink\" title=\"CSS MODULES\"></a>CSS MODULES</h3><p>这是一种在原生CSS的基础上，通过modules（也可以理解为文件）来划分CSS的作用域。</p>\n<p>首先先建一些以.module.css结尾的文件，这些文件里的样式可以只针对某个组件（某个module）生效。这种做法在Next.js尤为常见，因为CSS modules在Next.js是可以开箱即用的。</p>\n<p>下面是一个例子，在<code>Home.module.css</code>和<code>other.module.css</code>对<strong>同样的类名</strong>书写样式，也不会产生冲突。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@file</span> Home.module.css</span><br><span class=\"line\">.page &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: bule;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@file</span> other.module.css</span><br><span class=\"line\">.page &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只会生效这里import的样式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../styles/Home.module.css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"comment\">// 蓝色</span></span><br><span class=\"line\">\t\t&lt;div className=&#123;styles.page&#125;&gt;</span><br><span class=\"line\">\t\t\t&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优势：</li>\n</ul>\n<ol>\n<li>当需要复用样式的时候，不同的组件可以import同一份样式文件，减少很多重复样式代码，减轻打包体积～</li>\n<li>说到样式复用，CSS modules还有个特殊的composes属性，能引入别的module的css样式，也能重写（override）。<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.page</span> &#123;</span><br><span class=\"line\">\tcomposes: className from <span class=\"string\">&quot;./shared.css&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>不够“程序化”<br>CSS modules在原生CSS的基础上增加了以modules（文件）划分的作用域，解决了作用域问题，但仍逃不过在单个module内以原生的方式书写CSS。原生的CSS只能纯纯的枚举出每一条样式，如果能在书写CSS的时候也支持一些程序特性岂不是更好？比如最常用的循环、遍历、函数、继承…</li>\n</ol>\n<h3 id=\"CSS-PREPROCESSOR-预处理器\"><a href=\"#CSS-PREPROCESSOR-预处理器\" class=\"headerlink\" title=\"CSS PREPROCESSOR 预处理器\"></a>CSS PREPROCESSOR 预处理器</h3><p>Sass、Less、Stylus… 这些预处理器就是为了解决CSS不够“程序化”而诞生的。他们允许你用一种不一样的语法来写CSS，之后再经过编译转化成原生CSS。</p>\n<p>这里是一个例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 只需一键安装sass</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install sass</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 然后把原本的css后缀文件改成scss</span><br><span class=\"line\">// 就可以直接使用sass的方式来编写css啦，比如变量名、循环、...</span><br><span class=\"line\">@ file Home.module.scss</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"attribute\">primary-color</span>: red;</span><br><span class=\"line\">$ <span class=\"attribute\">font</span>-stack：Helvetica</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font</span>: <span class=\"number\">100%</span> $font-stack;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: $primary-color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优势：</li>\n</ul>\n<ol>\n<li>可以用变量、继承、循环、函数、…等程序特性</li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>学习成本<br>每种预处理器都有各自特定的语法，虽然是用一种类CSS的语言来编写，但总有有些差异。这意味着开发人员必须配合工具掌握新的语法。</li>\n<li>样式和项目代码微微割裂<br>在解决完作用域、程序化问题后，样式在前端项目中完完全全的独立出来了，似乎少了一些联动能力。既然我们有JSX这样整合JS和HTML的合体语言，为什么不能把CSS也合体进来呢？</li>\n</ol>\n<h3 id=\"CSS-IN-JS\"><a href=\"#CSS-IN-JS\" class=\"headerlink\" title=\"CSS IN JS\"></a>CSS IN JS</h3><p>这是一种把CSS写进JS的解决方案，就像把HTML写进JS后就有了JSX。这一类的库有styled components、emotion、jss、style tron、…</p>\n<p>举个使用styled jsx的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../styles/Home.module.css&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> [color, serColor] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;orange&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t&lt;div className=&#123;styles.page&#125;&gt;</span><br><span class=\"line\">\t\t\t&lt;style jsx&gt;&#123;`</span><br><span class=\"line\">\t\t\t\th1 &#123;</span><br><span class=\"line\">\t\t\t\t\t// 取的是组件state，可以随state变化！</span><br><span class=\"line\">\t\t\t\t\tcolor: $&#123;color&#125;;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t`&#125;&lt;/style&gt;</span><br><span class=\"line\">\t\t\t&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优势：</li>\n</ul>\n<ol>\n<li>轻松能实现的程序化能力<br>在sass里的程序化能力，CSS in JS都能做到，甚至更强，这种方式可以直接使用JS书写这种程序化语言，也不需要额外学习成本。</li>\n<li>创建动态样式<br>在sass里，程序代码或许和样式文件是完全独立开来的。而使用CSS in JS，样式和JS强绑定，我们的样式能够跟着代码、跟着组件的state等特性实现动态样式，特别灵活！</li>\n<li>不会有作用域问题<br>类似module，CSS in JS的样式只会绑定在样式定义的组件内，不会污染全局样式～</li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>CSS和JS混写，代码管理困难。</li>\n</ol>\n<h3 id=\"UTILITY-CLASSES-原子类\"><a href=\"#UTILITY-CLASSES-原子类\" class=\"headerlink\" title=\"UTILITY CLASSES 原子类\"></a>UTILITY CLASSES 原子类</h3><p>时下最火的新概念就是tailwindcss、windi css这些原子类CSS库，能够提供大量的原子类样式，帮助我们快速构建样式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置好tailwind之后</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"comment\">// 在这里写上tailwind的原子类classname，而不需要写样式</span></span><br><span class=\"line\">\t\t&lt;div className=&quot;text-5xl font-bold&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点</li>\n</ul>\n<ol>\n<li>需要比较麻烦的额外配置</li>\n<li>打包后，生成的HTML文件可读性非常非常低<br><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77ff846122eb448ab0d3129739c252e1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></li>\n<li>没有任何的内置组件</li>\n</ol>\n<ul>\n<li>优势</li>\n</ul>\n<ol>\n<li>打包时，能自动优化，去除没有使用的css样式，减轻打包产物体积。</li>\n</ol>\n<h3 id=\"CSS-FRAMEWORK\"><a href=\"#CSS-FRAMEWORK\" class=\"headerlink\" title=\"CSS FRAMEWORK\"></a>CSS FRAMEWORK</h3><p>bootstrap、bulma、这一类库既能提供特定的样式主题，又有内置的组件，比如bottom、cards、…等等。我个人在自己倒腾东西的时候非常喜欢用这一类框架，因为实在是太方便啦！这种方式在生产上几乎很少采用，因为开发人员往往需要根据产品原型来绘制前端界面，而不是这些框架固定的样式。另外采用这种方式，也容易对线上性能造成比较大影响。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 想使用这一类框架，只用一键安装上</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install bootstrap</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入框架的样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"comment\">// 想要使用的样式都在bootstrap中用各种classname封装好啦，直接调用boostrap的预留classname，搞定</span></span><br><span class=\"line\">\t\t&lt;div className=&quot;alert alert-primary&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>在只使用bootstrap来搭建组件和修改样式的话，会不太方便<br>由于这类框架已经自带了许多预留组件，而bootstrap的样式又是用classname来获取的。假设我需要频繁使用<code>&lt;Bottom /&gt;</code>组件，却又不想在每次使用的时候，都重复的写相同的classname，那么就会将他们封装成<code>&lt;CustomButtom /&gt;</code>。这么做的话，项目代码中就可能会有大量的仅仅是为了封装classname而存在的组件。</li>\n<li>打包文件过大<br>整个bootstrap文件是直接import进来的。因此在打包时，会把大量没使用到的classname也打包进来，会造成打包产物较大～</li>\n</ol>\n<h3 id=\"组件库\"><a href=\"#组件库\" class=\"headerlink\" title=\"组件库\"></a>组件库</h3><p>这是大家最熟悉的方式啦，ant design、material design、t design、rebase、….</p>\n<h3 id=\"最终落地的升级方案\"><a href=\"#最终落地的升级方案\" class=\"headerlink\" title=\"最终落地的升级方案\"></a>最终落地的升级方案</h3><p>不同的CSS处理方式各有优劣，在实际开发中，可以自行选择和搭配合适的CSS处理手段。</p>\n<p>在我目前工作中，是将项目的原生CSS，升级成css module + less 的组合，这样既能解决当前项目的核心矛盾：作用域和样式污染问题，又能让CSS的编写过程变得更“程序”，比如使用变量、继承等特性。</p>\n<p>没有使用css in js 是因为当前项目没有主题切换和动态样式这样场景，此外css in js 会让一个组件文件变得非常冗长，尤其是目前我的工作特别多复杂图表的封装，仅jsx部分代码行数已经非常长，再引入CSS代码容易变得更混乱。我个人也更加偏向能用独立文件区分出CSS代码的方式，这样展示出更好的项目分层。</p>\n<p>没有使用原子类的理由就更简单了，配置麻烦，可读性低，而且对团队内每个人都有较高的学习成本，不方便团队管理，直接pass了。</p>\n<p>在前端工程开发的过程中，面对多人协作的场景，建立标准和团队内的规范是非常重要的一个环节。尤其当前业界的前端，就是没有通用标准的情况下，影响项目工程稳健性的往往是缺乏规范和标准，而不是开发人员的水平。在我工作的项目中，最初就是因为大量人员流动，大家在项目中各按各自的方式写CSS，导致在一个项目中存在3种以上CSS写法，非常难维护，也出现了样式互相污染、互相冲突的情况，所以才有了这次对CSS的调研，以及对项目进行升级和改造的工作。</p>\n<p>附上一些参考资料：</p>\n<p><a href=\"https://webflow.com/blog/class-naming-101-bem\">https://webflow.com/blog/class-naming-101-bem</a></p>\n<p><a href=\"https://www.nextjs.cn/\">https://www.nextjs.cn/</a></p>\n<p><a href=\"https://www.tailwindcss.cn/\">https://www.tailwindcss.cn/</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=ouncVBiye_M\">https://www.youtube.com/watch?v=ouncVBiye_M</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=hdGsFpZ0J2E\">https://www.youtube.com/watch?v=hdGsFpZ0J2E</a></p>\n"},{"title":"urllib3 Drop support for OpenSSL<1.1.1 排障记录","date":"2023-05-30T07:23:00.000Z","_content":"","source":"_posts/urllib3-Drop-support-for-OpenSSL-1-1-1排障记录.md","raw":"---\ntitle: urllib3 Drop support for OpenSSL<1.1.1 排障记录\ndate: 2023-05-30 15:23:00\ntags:\n---\n","slug":"urllib3-Drop-support-for-OpenSSL-1-1-1排障记录","published":1,"updated":"2023-05-30T07:23:09.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibi0o1h00044bqb032q9kwm","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}